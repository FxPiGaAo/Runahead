#ifndef __CPU_DYN_INST_PARENT_HH__
#define __CPU_DYN_INST_PARENT_HH__

#include "mem/request.hh"

namespace gem5
{

class DynInstParent {
protected:
  enum Flags
  {
      MissedInL2,
      MaxFlags
  };
  std::bitset<MaxFlags> runaheadFlags;

  /* outstanding requests generated by this instruction
  (i.e. those which haven't returned with data yet).
  This is normally a signgle request, but when trying
  to access data split accross two cache lines,
  this may result in more requests being created */
  std::vector<RequestPtr> _outstandingReqs;

  bool _runaheadInst = false;

public:
  virtual void setL2Miss()  { runaheadFlags.set(MissedInL2); }
  void resetL2Miss()        { runaheadFlags.reset(MissedInL2); }
  bool missedInL2()         { return runaheadFlags[MissedInL2]; }
  
  virtual bool isExecuted() const = 0;
  virtual bool isSquashed() const = 0;
  virtual int getSeqNum() = 0;

  void addReq(RequestPtr req) 
  {   
    _outstandingReqs.emplace_back(req);
    if (_runaheadInst) {
        req->setGeneratedInRunahead();
    }
  }

  bool numOutstandingRequests() 
  {
    return _outstandingReqs.size(); 
  }

  void reqCompleted(RequestPtr req) 
  {
    // remove the completed request
    for (int i=0; i<_outstandingReqs.size(); ++i) {
        if (_outstandingReqs[i].get() == req.get()) {
            _outstandingReqs.erase(_outstandingReqs.begin() + i);
        }
    }
  }

};

} // gem5
#endif // __CPU_DYN_INST_PARENT_HH__
